Cyber Security Base: Project 1

Web application for signing up to an event

Baseline functionality: add signup (name + address): after signing up, view "done" page

Plan: add A3 xss, A8 csfr (incl. A5 security misconfig), A6 sensitive data exposure?, A7 function level access control 

Added A7: missing function level access control. Link to view all participants is only visible when logged in, but by going directly to localhost:8080/signups one can view these, withoutbeing logged in as admin. I think this also constitutes A6: sensitive data exposure as you can get hold of names and addresses. Other way to get to A6: admin password is short and in the top10000, so easy to crack

Fix A7: uncomment line //.antMatchers("/signUps/**").authenticated() in security  configuration
Fix A6: change admin password to something more sensible. Come up with a sensible passwd, bcrypt hash it (https://www.dailycred.com/article/bcrypt-calculator) using 10 rounds, and insert it to custom user details configuration as the admin password

Add A8: CSFR (incl. A5: security misconfiguration)
	security misconfiguration: CSFR protection is disabled (for some strange reason:O)
	Enables CSFR: deleting participants 

Add A3: xss. Change signups page so that signup name and address are shown unsanitized (change th:text to th:utext). Still, cookies are htmlOnly, so can't access those. This means that xss and CSFR are still pretty useless, as CSFR attacks can't get hold of cookies







At the moment enabled are: 
A3, XSS
A7, missing function level access control
A8, CSFR

A5, security misconfiguration
A6, sensitive data exposure (two ways)


Project has the functionality to sign up to an event by providing name and address. Additionally, the project has some "administrative" features. For example, an administrator can view all sign ups and delete them. The project has numerous vulernabilities. 

To discover and fix the vulernabilities: 

Open project in netbeans etc. Run project. 
Start OWASP ZAP. Set up zap proxy as before. 
Open up the address localhost:8080 in your web browser. If zap proxy is set correctly, zap sees that you just connected to the address.



Vulernabilities, how to exploit them, and how to fix them:

A7, missing function level access control. The page has a login possibility for administrators: you can only get to admin page once authenticated. From the admin page, there are links to various administrative tasks (at the moment only to view all signed up participants and delete all signups). The admin page itself requires authentication, but the page for viewing sign-ins does not. 
	How to discover: once you have set up ZAP and connected to localhost, you should see the connection request in zap. Right click on the request, choose attack, and then choose spider. This will attempt to map out the web application: you should see somewhere in the spider output site "localhost:8080/signUps". Try to write this address to the browser address bar: you will be able to get to the page, even though it is only meant for authorized admins. You can also delete participants from this page.

	Solution: in the securityConfiguration.java, after the line "http.authorizeRequests()", uncomment the line "//.antMatchers("/signUps/**").authenticated()". Now trying to get to signUps, or any subsites such as the deleteAll page, requires authentication.


Vulernability A3, XSS. In the landing page of the web application, sign up, with javascript code (such as <script>alert("BOO");</script>) as either name or address. Could even have javascript in both. When someone views the sign-ups (at localhost:8080/signUps, anyone can do this unless you fixed it in the last step), javascript is executed
	Solution: the text viewed in signups page is unsanitized. In the signUps.html, when signups are listed, change the code from <span th:utext(...) to <span th:text(...). This this sanitizes the text, and javascript is not executed. PROBLEM with this: cookies are tagged as HTML only, so javascript cannot access them. This weakens the attack.


A8, CSRF. Get an authenticated user to load "http://localhost:8080/signUps/deleteAll" in any way you want, such as malicious online picture in an e-mail. (For now just enter it to the browser address bar). This deletes all sign-ups, if there are any. 
	Solution: csrf protection is deliberately disabled in the SecurityConfiguration.java, with the line "http.csrf().disable();". Comment this line, and a csrf token will be added to all requests: without this token, the request won't go through. 

A6, sensitive data exposure. Before fixing the missing function level access control flaw, anyone can get their hands on the list of registered participants. Even after that flaw is fixed, the admin password is a weak one. One might try to login with username admin, and password admin> in this case, this will let you in. Otherwise you could try a few likely admin account names and top10000 passwords, or similar, with zap. With this bad username and password, it's very easy to gain access to sensitive data (in this case names and addresses of people who have signed up). 
	Solution: To fix this, change the admin username and password in CustomUserDetailsService.java. Username you can change right away: for the parrword you need to give a bcrypt hash (for this purpose, you can generate one online: https://www.dailycred.com/article/bcrypt-calculator). Otherwise I wouldn't send passwords to random online services. After chaging the username and password for the admin account, and fixing the earlier flaws, it's much harder to get hold of any sensitive data.

A5, security misconfiguration. The deliberate disabling of CSRF tokens is a clear security misconfiguration. The weak admin password could also be considered one(?). Change these as earlier described.



